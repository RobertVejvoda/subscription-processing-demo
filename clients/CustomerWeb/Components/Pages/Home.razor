@page "/"
@using CustomerWeb.Models
@using CustomerWeb.RESTClients
@inject IOdsApi OdsApi;
@attribute [StreamRendering]

<PageTitle>Subscriptions</PageTitle>

<h1>Subscriptions</h1>

<div>
    <button class="btn btn-primary" onclick="@Reload()">Reload</button>
</div>

@if (loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Key</th>
            <th>Subscription ID</th>
            <th>Customer ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>State</th>
            <th>Loan</th>
            <th>Insured</th>
            <th>Underwriting</th>
            <th>Message</th>
            <th>Received</th>
            <th>Updated</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var subscription in subscriptions)
        {
            <tr>
                <td>@subscription.ProcessInstanceKey</td>
                <td>@subscription.SubscriptionId</td>
                <td>@subscription.CustomerId</td>
                <td>@subscription.FirstName</td>
                <td>@subscription.LastName</td>
                <td>@subscription.Email</td>
                <td>@subscription.SubscriptionState</td>
                <td>@subscription.LoanAmount.ToString("C0")</td>
                <td>@subscription.InsuredAmount.ToString("C0")</td>
                <td>@subscription.UnderwritingResult</td>
                <td>@subscription.Message</td>
                <td>@subscription.ReceivedOn?.ToShortDateString()</td>
                <td>@subscription.LastUpdatedOn?.ToShortDateString()</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Subscription> subscriptions = [];
    private bool loading = true;
    
    protected override Task OnInitializedAsync() => Reload();
    
    private async Task Reload()
    {
        loading = true;
        
        // Simulate asynchronous loading to demonstrate streaming rendering
        // await Task.Delay(500);

        subscriptions = await OdsApi.GetSubscriptions(15);

        loading = false;    
    }
}