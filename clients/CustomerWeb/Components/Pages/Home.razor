@page "/"
@using CustomerWeb.Models
@using CustomerWeb.RESTClients
@inject ICustomerExperienceApi AggregationServiceApi;
@attribute [StreamRendering]

<PageTitle>Subscriptions</PageTitle>

<h1>Subscriptions</h1>

@if (loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    if (subscriptions != null && subscriptions.Any())
    {
        <table class="table">
            <thead>
            <tr>
                <th>Key</th>
                <th>Subscription ID</th>
                <th>Customer ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>State</th>
                <th>Loan</th>
                <th>Insured</th>
                <th>Received</th>
                <th>Updated</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var subscription in subscriptions)
            {
                <tr>
                    <td>@subscription.ProcessInstanceKey</td>
                    <td>@subscription.SubscriptionId ?? "N/A"</td>
                    <td>@subscription.CustomerId ?? "N/A"</td>
                    <td>@subscription.FirstName</td>
                    <td>@subscription.LastName</td>
                    <td>@subscription.Email</td>
                    <td>@subscription.SubscriptionState ?? "N/A"</td>
                    <td>@subscription.LoanAmount.ToString("C0")</td>
                    <td>@subscription.InsuredAmount.ToString("C0")</td>
                    <td>@subscription.ReceivedOn.ToShortDateString()</td>
                    <td>@subscription.LastUpdatedOn.ToShortDateString()</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>
            <em>There are no subscriptions found matching your criteria.</em>
        </p>
    }
}

@code {
    private IEnumerable<SubscriptionRequestModel>? subscriptions;
    private bool loading = true;
    
    protected override async Task OnInitializedAsync() => await Reload();
    
    private async Task Reload()
    {
        loading = true;
        
        // Simulate asynchronous loading to demonstrate streaming rendering
        // todo: remove
        await Task.Delay(500);

        subscriptions = await AggregationServiceApi.GetSubscriptionRequests();

        loading = false;    
    }
}